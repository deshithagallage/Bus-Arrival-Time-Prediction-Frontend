export async function fetchBusRoutes() {
  try {
    //backend URL
    // const backendURL =
    // import.meta.env.VITE_BACKEND_URL || "http://localhost:8000/";
    // const response = await fetch(`${backendURL}api/bus_routes/all`);
    // if (!response.ok) {
    //   throw new Error(`HTTP error! status: ${response.status}`);
    // }
    // const data = await response.json();
    //console.log(data.route_names);
    const data = [
      "B1",
      "B100",
      "B103",
      "B11",
      "B12",
      "B13",
      "B14",
      "B15",
      "B16",
      "B17",
      "B2",
      "B20",
      "B24",
      "B25",
      "B26",
      "B3",
      "B31",
      "B32",
      "B35",
      "B36",
      "B37",
      "B38",
      "B39",
      "B4",
      "B41",
      "B42",
      "B43",
      "B44",
      "B44-SBS",
      "B45",
      "B46",
      "B46-SBS",
      "B47",
      "B48",
      "B49",
      "B52",
      "B54",
      "B57",
      "B6",
      "B60",
      "B61",
      "B62",
      "B63",
      "B64",
      "B65",
      "B67",
      "B68",
      "B69",
      "B7",
      "B70",
      "B74",
      "B8",
      "B82",
      "B83",
      "B84",
      "B9",
      "BM1",
      "BM2",
      "BM3",
      "BM4",
      "BM5",
      "Bx1",
      "Bx10",
      "Bx11",
      "Bx12",
      "Bx12-SBS",
      "Bx13",
      "Bx15",
      "Bx16",
      "Bx17",
      "Bx18",
      "Bx19",
      "Bx2",
      "Bx20",
      "Bx21",
      "Bx22",
      "Bx23",
      "Bx24",
      "Bx26",
      "Bx27",
      "Bx28",
      "Bx29",
      "Bx3",
      "Bx30",
      "Bx31",
      "Bx32",
      "Bx33",
      "Bx34",
      "Bx35",
      "Bx36",
      "Bx38",
      "Bx39",
      "Bx4",
      "Bx40",
      "Bx41",
      "Bx41-SBS",
      "Bx42",
      "Bx46",
      "Bx4A",
      "Bx5",
      "Bx6",
      "Bx6-SBS",
      "Bx7",
      "Bx8",
      "Bx9",
      "BxM1",
      "BxM10",
      "BxM11",
      "BxM18",
      "BxM2",
      "BxM3",
      "BxM4",
      "BxM6",
      "BxM7",
      "BxM8",
      "BxM9",
      "M Shuttle Bus",
      "M1",
      "M10",
      "M100",
      "M101",
      "M102",
      "M103",
      "M104",
      "M106",
      "M11",
      "M116",
      "M12",
      "M14A",
      "M14D",
      "M15",
      "M15-SBS",
      "M2",
      "M20",
      "M21",
      "M22",
      "M23-SBS",
      "M3",
      "M31",
      "M34-SBS",
      "M34A-SBS",
      "M35",
      "M4",
      "M42",
      "M5",
      "M50",
      "M55",
      "M57",
      "M60-SBS",
      "M66",
      "M7",
      "M72",
      "M79-SBS",
      "M8",
      "M86-SBS",
      "M9",
      "M96",
      "M98",
      "Q1",
      "Q10",
      "Q100",
      "Q101",
      "Q102",
      "Q103",
      "Q104",
      "Q11",
      "Q110",
      "Q111",
      "Q112",
      "Q113",
      "Q114",
      "Q12",
      "Q13",
      "Q15",
      "Q15A",
      "Q16",
      "Q17",
      "Q18",
      "Q19",
      "Q2",
      "Q20A",
      "Q20B",
      "Q21",
      "Q22",
      "Q23",
      "Q24",
      "Q25",
      "Q26",
      "Q27",
      "Q28",
      "Q29",
      "Q3",
      "Q30",
      "Q31",
      "Q32",
      "Q33",
      "Q34",
      "Q35",
      "Q36",
      "Q37",
      "Q38",
      "Q39",
      "Q4",
      "Q40",
      "Q41",
      "Q42",
      "Q43",
      "Q44-SBS",
      "Q46",
      "Q47",
      "Q48",
      "Q49",
      "Q5",
      "Q50",
      "Q52",
      "Q52-SBS",
      "Q53",
      "Q53-SBS",
      "Q54",
      "Q55",
      "Q56",
      "Q58",
      "Q59",
      "Q6",
      "Q60",
      "Q64",
      "Q65",
      "Q66",
      "Q67",
      "Q69",
      "Q7",
      "Q70-SBS",
      "Q72",
      "Q76",
      "Q77",
      "Q8",
      "Q83",
      "Q84",
      "Q85",
      "Q88",
      "Q9",
      "QM1",
      "QM10",
      "QM11",
      "QM12",
      "QM15",
      "QM16",
      "QM17",
      "QM18",
      "QM2",
      "QM20",
      "QM21",
      "QM24",
      "QM25",
      "QM3",
      "QM31",
      "QM32",
      "QM34",
      "QM35",
      "QM36",
      "QM4",
      "QM40",
      "QM42",
      "QM44",
      "QM5",
      "QM6",
      "QM7",
      "QM8",
      "S40",
      "S42",
      "S44",
      "S46",
      "S48",
      "S51",
      "S52",
      "S53",
      "S54",
      "S55",
      "S56",
      "S57",
      "S59",
      "S61",
      "S62",
      "S66",
      "S74",
      "S76",
      "S78",
      "S79-SBS",
      "S81",
      "S84",
      "S86",
      "S89",
      "S90",
      "S91",
      "S92",
      "S93",
      "S94",
      "S96",
      "S98",
      "Shuttle-M",
      "Shuttle-M1",
      "Shuttle-M2",
      "Shuttle-M3",
      "X1",
      "X10",
      "X10B",
      "X11",
      "X12",
      "X14",
      "X15",
      "X17",
      "X17A",
      "X17J",
      "X19",
      "X2",
      "X21",
      "X22",
      "X22A",
      "X27",
      "X28",
      "X3",
      "X30",
      "X31",
      "X37",
      "X38",
      "X4",
      "X42",
      "X5",
      "X63",
      "X64",
      "X68",
      "X7",
      "X8",
      "X9",
    ];
    //wait 2 seconds
    await new Promise((resolve) => setTimeout(resolve, 500));
    return data;
  } catch (error) {
    console.error("Error:", error);
    throw error; // Re-throw the error so that the caller can handle it.
  }
}

export async function fetchBusStops(route: string, direction: number) {
  try {
    //backend URL
    // const backendURL =
    // import.meta.env.VITE_BACKEND_URL || "http://localhost:8000/";
    //const backendURL = "http://localhost:8000/";
    // const response = await fetch(
    //   `${backendURL}api/bus_routes/by-name/${route}/${direction}`
    // );
    // if (!response.ok) {
    //   throw new Error(`HTTP error! status: ${response.status}`);
    // }
    // const data = await response.json();
    console.log(route, direction);
    const data = {
      stops: [
        {
          id: "OuEr6xNuxEfZoAKxIAdr",
          name: "AV X/MC DONALD AV",
          longitude: null,
          latitude: null,
        },
        {
          id: "tNhr0PPoAz7A4kjMopvo",
          name: "ORIENTAL BL/HASTINGS ST",
          longitude: null,
          latitude: null,
        },
        {
          id: "MRVpJcrYsNCJehdsKs0f",
          name: "5 AV/86 ST",
          longitude: null,
          latitude: null,
        },
        {
          id: "W2SyXVFVSzsPWzbjaV54",
          name: "86 ST/11 AV",
          longitude: null,
          latitude: null,
        },
        {
          id: "9bZC4Xesrmx0ofEv9YMN",
          name: "86 ST/STILLWELL AV",
          longitude: null,
          latitude: null,
        },
        {
          id: "PBpgKCwlIXaUsesNXYlI",
          name: "BRIGHTON BEACH AV/CORBIN PL",
          longitude: null,
          latitude: null,
        },
        {
          id: "zI9aOXKQU7jgCDUdQ2Sf",
          name: "86 ST/20 AV",
          longitude: null,
          latitude: null,
        },
        {
          id: "tjS0Q0MRhQR8dKo4fBSP",
          name: "BRIGHTON BEACH AV/BRIGHTON 14 ST",
          longitude: null,
          latitude: null,
        },
        {
          id: "98Is7rsiyIp1QOgszSEo",
          name: "86 ST/NEW UTRECHT AV",
          longitude: null,
          latitude: null,
        },
        {
          id: "9MpoPNXhoSKllLNPPi6o",
          name: "87 ST/4 Av",
          longitude: null,
          latitude: null,
        },
        {
          id: "9MpoPNXhoPkllLNPPi6o",
          name: "FOSTER AV/E 18 ST",
          longitude: null,
          latitude: null,
        },
      ],
    };
    //wait 2 seconds
    await new Promise((resolve) => setTimeout(resolve, 500));
    return data.stops;
  } catch (error) {
    console.error("Error:", error);
    throw error; // Re-throw the error so that the caller can handle it.
  }
}

export async function fetchArrivalTime(
  direction: number,
  route: string,
  stop: string
) {
  try {
    //backend URL
    const backendURL =
      import.meta.env.VITE_BACKEND_URL || "http://localhost:8000/";
    const recordedTime = new Date()
      .toISOString()
      .slice(0, 19)
      .replace("T", " "); // Format as "YYYY-MM-DD HH:MM:SS"

    const response = await fetch(`${backendURL}api/model/predict`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        recorded_time: recordedTime,
        direction_ref: direction,
        published_line_name: route,
        next_stop_point_name: stop,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    // console.log({
    //   recorded_time: recordedTime,
    //   direction_ref: direction,
    //   published_line_name: route,
    //   next_stop_point_name: stop,
    // });
    //console.log(data);
    if (data && typeof data.prediction === "number") {
      return data.prediction;
    } else {
      return null;
    }
  } catch (error) {
    console.error("Error:", error);
    throw error;
  }
}
